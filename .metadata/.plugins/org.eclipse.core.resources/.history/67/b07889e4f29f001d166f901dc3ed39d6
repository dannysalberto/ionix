package com.ionix.testdev.controllers;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ionix.testdev.business.UserBusinnes;
import com.ionix.testdev.common.CommonConstants;
import com.ionix.testdev.dto.UserDTO;
import com.ionix.testdev.responses.GeneralResponse;
import com.ionix.testdev.responses.UserResponse;
import com.ionix.testdev.services.UserService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/articles")
@ApiResponses(value = {
        @ApiResponse(code = CommonConstants.SUCCESS_CODE, response =  UserResponse.class, message = CommonConstants.SUCCESS_MESSAGE ),
        @ApiResponse(code = CommonConstants.BADREQUEST_CODE, response =  GeneralResponse.class, message = CommonConstants.BADREQUEST_MESSAGE),
        @ApiResponse(code = CommonConstants.ERROR_CODE, response =  GeneralResponse.class, message = CommonConstants.ERROR_MESSAGE),
        @ApiResponse(code = CommonConstants.NOTFOUND_CODE, response =  GeneralResponse.class, message = CommonConstants.NOTFOUND_MESSAGE)
})
@Api(value = "users", consumes = "application/json", produces = "application/json" , tags = { "users" })
public class UserController {
	
	@Autowired
	UserBusinnes userBusinnes;
	
	@Autowired
	UserService service;
	
	@PostConstruct
	public void test() throws Exception {
		UserDTO user = new UserDTO("dannys","dannysalberto@gmail.com","pruebas");
		service.saveUser(user);
		
		System.out.println(service.listUsers());;
		
	}
	
	@ApiOperation(value = "Get users list ")
	@GetMapping(value="list" , produces = {"application/json"} )
	public ResponseEntity<?> list(){
        return userBusinnes.list();
    }
	
	/*@ApiOperation(value = "Get order by internal id")
	@GetMapping(value="get" , produces = {"application/json"} )
    public ResponseEntity<GeneralResponse<?>> getById(@RequestParam(name="idorder") @NotEmpty String idOrder){
        return purchaseOrderBusiness.findOrderById(idOrder);
    }
	
	@ApiOperation(value = "Create order ")
	@PostMapping(value="save" , produces = {"application/json"} )
    public ResponseEntity<GeneralResponse<?>> save(@Valid @RequestBody  OrderInsertDTO order) throws ParseException {
        return purchaseOrderBusiness.save(order);
    }
	
	@ApiOperation(value = "Let update order state by number purchase ")
	@PutMapping(value="update" , produces = {"application/json"} )
    public ResponseEntity<GeneralResponse<?>> update(@Valid @RequestBody OrderDTO order) throws ParseException{
        return purchaseOrderBusiness.update(order);
    }
	
	@ApiOperation(value = "Let update order attributes state by number purchase ")
	@PutMapping(value="update/state" , produces = {"application/json"} )
    public ResponseEntity<GeneralResponse<?>> updateState(@Valid @RequestBody OrderUpdateDTO order) throws ParseException{
        return purchaseOrderBusiness.updateState(order);
    }
	
	@ApiOperation(value = "Disabled notifications by number purchase")
	@PutMapping(value="update/disable/notification" , produces = {"application/json"} )
    public ResponseEntity<GeneralResponse<?>> disableNotificationOrder(@Valid @RequestBody OrderUpdateDisableNotificationDTO order) throws ParseException{
        return purchaseOrderBusiness.disableNotificationOrder(order);
    }
	
	@ApiOperation(value = "Delete order by internal id ")
	@DeleteMapping(value="drop" , produces = {"application/json"} )
    public ResponseEntity<GeneralResponse<?>> drop(String idOrder){
        return purchaseOrderBusiness.drop(idOrder);
    }*/
	

}
